<<<<<<< HEAD
theta.min
y
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta.min
acf(theta.min)
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
m1 <- min(mu1_i,mu2_i)
m2 <- max(mu1_i,mu2_i)
mu1_i <- m1
mu2_i <- m2
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
PHI
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
acf(theta.min)
acf(theta.max)
acf(theta_min)
acf(theta_max)
Y_tilde <- NULL
for (i in 1:N)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
Y_tilde <- NULL
x <- c(rbinom(n=1, size=1, prob=p))
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
x
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
x <- c(x, rbinom(n=1, size=1, prob=PHI[i+1,1]))
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
plot(Y_tilde)
plot(density(Y_tilde))
lines(glucose$X86)
lines(glucose$X86,col='red')
plot(density(Y_tilde))
par(new=T)
plot(glucose$X86,col='red')
plot(density(glucose$X86),col='red')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n')
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab='n')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2,xlab='Values')
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
combn(5,3)
t(combn(5,3))
library(ggplot2)
library(dplyr)
# load data
df <- read.csv('dataset_diabetes/diabetic_data.csv')
map <- read.csv('dataset_diabetes/IDs_mapping.csv')
df[df == '?'] = NA
df[df == 'None'] = NA
setwd("C:/Vivek's Stuff/Classes/Bayesian Theory/Project/STAT262")
df <- read.csv('dataset_diabetes/diabetic_data.csv')
map <- read.csv('dataset_diabetes/IDs_mapping.csv')
=======
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Name:", placeholder = "Enter text..."),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
observeEvent(input$submit, {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title) #build histogram
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "yaxis", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xaxis", label = "X-axis Label:", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
observeEvent(input$submit, {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title) #build histogram
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", value = "Frequency", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", value = "Frequency", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
verbatimTextOutput("value"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "plot_type", label = "Select Plot Type:", choices = c("histogram", "pca"))
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "plot_type", label = "Select Plot Type:", choices = c("histogram", "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
if(input$variable = hist){
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
if(input$variable = "hist"){
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
#observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
#})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
clear
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
library(shiny)
library(shinyFiles)
library(fs)
library(png)
library(dplyr)
# Define UI for app ----
ui <- fluidPage(
# App title ----
titlePanel("Prototype"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
helpText(HTML("Step 1: Upload files to server.<br/>(Upload Size Limit 100MB)")),
# Input: Upload files ----
fileInput(inputId = "myFile",
label = "Upload Files:",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".png",
".jpg",
".csv",
".fastq",
".fq",
".fastq.gz",
".fq.gz",
".sam",
".bam")
),
# Horizontal line ----
tags$hr(style="border-top: 3px double #b1bbcc"),
helpText("Step 2: Select file to be analyzed"),
shinyFilesButton(id = "file",
label = "File select",
title = "Please select a file",
multiple = TRUE),
# Input: Submit button ----
actionButton(inputId = "submit", label = "Submit")
),
# Main panel for displaying output ----
mainPanel(
# output metadata table
helpText("Files Selected:"),
verbatimTextOutput("filepaths"),
tags$hr(),
# output selected names
helpText("FastQC status:"),
textOutput("filepaths1"),
tags$hr(),
# display tabs
tabPanel(tabPanel("Plot")),
uiOutput('mytabs')
)
)
)
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
shiny::runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
R.version
updateR()
R.version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host = "bacteria.ensembl.org")
bacteria=useMart("bacteria_mart_14")
listMarts()
library(biomaRt)
listMarts()
listMarts(host="bacteria.ensembl.org")
listMarts(host="ENSEMBL_MART_ENSEMBL")
listMarts("ENSEMBL_MART_ENSEMBL")
listMarts(mart = "ENSEMBL_MART_ENSEMBL")
listMarts(mart = ENSEMBL_MART_ENSEMBL)
bacteria=useMart("ENSEMBL_MART_ENSEMBL")
bac=useDataset("str_22007_gene", mart=bacteria)
listDatasets()
listDatasets(mart = bacteria)
bac=useDataset(mart=bacteria)
listMarts()
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host="bacteria.ensembl.org")
getGroups(db = "refseq", kingdom = "bacteria")
listMarts(host="plants.ensembl.org")
listMarts(host="bacteria.ensembl.org")
library(clusterProfiler)
install.packages('clusterProfiler')
xtheta <- seq(0,50,length=1000)
n1.a <- 10 ; sy1.a <- 117   # A data in observed y_{A}
a.a <- 120 ; b.a <- 10  # A prior parameters
n1.a <- 10 ; sy1.a <- 117   # A data in observed y_{A}
a.b <- 12  ; b.b <- 1   # B prior parameters
n1.b <- 13 ; sy1.b <- 113   # B data in observed y_{B}
dgamma(xtheta, a.b+sy1.b, b.b+n1.b)
dgamma(xtheta, 12*(a.b+sy1.b), b.b+n1.b)
dgamma(xtheta, 12*n, n)
n <- seq(1,50,length=50)
dgamma(xtheta, 12*n, n)
dgamma(xtheta, 12*n, n)
plot(n,dgamma(xtheta, 12*n, n) )
plot(n,dgamma(n, 12*n, n))
dgamma(xtheta, (12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, (12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, ((12*a.b)+sy1.b), b.b+n1.b)
plot(xtheta, dgamma(xtheta, ((12*a.b)+sy1.b), b.b+n1.b))
dgamma(n, ((12*a.b)+sy1.b), b.b+n1.b)
xtheta <- dgamma(n, ((12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, ((12*n)+sy1.b), n+n1.b)
dgamma(n, ((12*n)+sy1.b), n+n1.b)
?dgamma
dgamma(n, ((12*n)+sy1.b), n+n1.b)
n*2
((12*n)+sy1.b)/(n+n1.b)
plot(n, ((12*n)+sy1.b)/(n+n1.b))
setwd("~/")
setwd("~/Dropbox/STAT626/Project/STAT626")
#require(ggplot2)
# load data
df <- read.csv('dataset_diabetes/diabetic_data.csv')
>>>>>>> master
df[df == '?'] = NA
df[df == 'None'] = NA
# remove columns with NAs
df <- df[,colSums(is.na(df)) == 0]
# relabel readmitted
df$readmitted = ifelse(df$readmitted=='NO',0,1)
<<<<<<< HEAD
# remove columns
df <- df[ , !(names(df) %in% c('discharge_disposition_id', 'admission_source_id'))]
#delete invalid gender
df <- df[- grep("Unknown/Invalid", df$gender),]
# turn treatment into binomial
df[16:38] <- ifelse(df[16:38] == 'No', 0, 1)
# rename
#write.csv(df, file='dataset_diabetes/diabetic_data.filtered.csv')
colnames(df)
head(df)
install.packages('bang')
library(bang)
df.new <- df[c('insulin','age')]
df.new$age <- as.numeric(factor(df.new$age))
df.new$age <- as.numeric(factor(df.new$age))
df.new$insulin <- as.numeric(df.new$insulin)
colnames(df.new) <- c('y','n')
df.new$y[df.new$y == 0] <- 2
df.new$n <- df.new$n + 10
success.df <- df.new %>% filter(y == 1) %>% group_by(n) %>% summarise(success=n())
count.df <- df.new %>% group_by(n) %>% summarise(count=n())
summary.df <- merge(success.df, count.df)
dim(df.new)
summary.2.df
summary.2.df <- summary.df[,2:3]
summary.2.df
class(summary.2.df)
bb_model <- hef(model = "beta_binom", data = summary.2.df[1:3,], n = 1)
bb_model
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 100)
bb_model
plot(bb_model, ru_scale = TRUE)
bb_model
bb_model$sim_vals
plot(bb_model$sim_vals[,1])
plot(bb_model$sim_vals[,1],bb_model$sim_vals[,2])
bb_model$sim_vals_rho
bb_model$box
bb_model$theta_sim_vals
plot(bb_model$theta_sim_vals)
plot(bb_model$theta_sim_vals,ru=TRUE)
plot(bb_model$theta_sim_vals,ru_scale=TRUE)
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 10)
plot(bb_model, ru_scale = TRUE)
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 2)
plot(bb_model, ru_scale = TRUE)
bb_model$sim_vals_rho
bb_model$theta_sim_vals
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 100)
plot(bb_model, ru_scale = TRUE)
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 1000)
plot(bb_model, ru_scale = TRUE)
bb_model$sim_vals
summary(bb_model)
bb_model
bb_model$d
bb_model$pa
bb_model$model
bb_model$prior
bb_model$ru
bb_model$data
bb_model$box
bb_model$sim_vals
bb_model$theta_sim_vals
plot(bb_model$theta_sim_vals[,1])
plot(density(bb_model$theta_sim_vals[,1]))
plot(density(bb_model$theta_sim_vals[,2]))
plot(density(bb_model$theta_sim_vals[,3]))
plot(density(bb_model$theta_sim_vals[,4]))
plot(density(bb_model$theta_sim_vals[,5]))
plot(density(bb_model$theta_sim_vals[,6]))
plot(density(bb_model$theta_sim_vals[,7]))
plot(density(bb_model$theta_sim_vals[,8]))
plot(density(bb_model$theta_sim_vals[,9]))
plot(density(bb_model$theta_sim_vals[,10]))
plot(density(bb_model$theta_sim_vals[,1]))
plot(bb_model,params='pop',plot_type = 'both',which_pop = pops)
plot(bb_model$sim_vals[,1])
plot(1:1000,bb_model$sim_vals[,1])
plot(1:1000,bb_model$sim_vals[,1],type='l')
bb_model$sim_vals
bb_model$sim_vals[-1]
bb_model$sim_vals[999:]
bb_model$sim_vals[1000]
bb_model$sim_vals[1000,1]
bb_model$sim_vals[1000,2]
acf(bb_model$sim_vals[,1])
acf(bb_model$sim_vals[,2])
log(runif(1))
log(runif(1))
log(runif(1))
log(runif(1))
log(runif(1))
bb_model$sim_vals[1000,2]<20
bb_model$sim_vals[:,2]
bb_model$sim_vals[,2]
bb_model$sim_vals[,2]<20
bb_model$prior
user_prior <- function(x)
{
return(-5 * log(x[1] + x[2]))
}
plot(bb_model, ru_scale = TRUE,set_user_prior=user_prior)
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 1000,set_user_prior=user_prior)
bb_model <- hef(model = "beta_binom", data = summary.2.df, n = 1000)
source(hef)
getAnywhere(hef)
=======
write.csv(df, file='dataset_diabetes/diabetic_data.filtered.csv')
View(df)
summary(df$admission_source_id == 0)
summary(df$admission_source_id)
table(df$admission_source_id)
table(df$admission_type_id)
map <- read.csv('dataset_diabetes/IDs_mapping.csv')
View(map)
df <- df[-c('discharge_disposition_id', 'admission_source_id')]
df <- subset(df, select = -c('discharge_disposition_id', 'admission_source_id'))
df <- df[, !c('discharge_disposition_id', 'admission_source_id')]
df[ , !(names(df) %in% c('discharge_disposition_id', 'admission_source_id'))]
df <- df[ , !(names(df) %in% c('discharge_disposition_id', 'admission_source_id'))]
View(df)
>>>>>>> master
