})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Name:", placeholder = "Enter text..."),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
observeEvent(input$submit, {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title) #build histogram
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "yaxis", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xaxis", label = "X-axis Label:", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
observeEvent(input$submit, {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title) #build histogram
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", value = "Frequency", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", value = "Frequency", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
verbatimTextOutput("value"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
verbatimTextOutput("value"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", value = "Distribution", placeholder = "x-axis label"),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "plot_type", label = "Select Plot Type:", choices = c("histogram", "pca"))
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "plot_type", label = "Select Plot Type:", choices = c("histogram", "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
if(input$variable = hist){
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
if(input$variable = "hist"){
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId="num", label = "choose number", value = 50, min = 1, max = 100),
textInput(inputId = "title", label = "Input Plot Title:", placeholder = "Enter text..."),
textInput(inputId = "ylab", label = "Y-axis Label:", placeholder = "y-axis label"),
textInput(inputId = "xlab", label = "X-axis Label:", placeholder = "x-axis label"),
selectInput(inputId = "variable",
label = "Select Plot Type:",
choices = c("Histogram" = "hist", "PCA" = "pca")),
actionButton(inputId = "submit", label = "Submit"),
plotOutput("hist")
)
server <- function(input, output){
#wait for submit button
#observeEvent(input$submit, {
output$hist <- renderPlot({
#build histogram
hist(rnorm(input$num),
main = input$title,
xlab = input$xlab,
ylab = input$ylab
)
})
#})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
clear
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
library(shiny)
library(shinyFiles)
library(fs)
library(png)
library(dplyr)
# Define UI for app ----
ui <- fluidPage(
# App title ----
titlePanel("Prototype"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
helpText(HTML("Step 1: Upload files to server.<br/>(Upload Size Limit 100MB)")),
# Input: Upload files ----
fileInput(inputId = "myFile",
label = "Upload Files:",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".png",
".jpg",
".csv",
".fastq",
".fq",
".fastq.gz",
".fq.gz",
".sam",
".bam")
),
# Horizontal line ----
tags$hr(style="border-top: 3px double #b1bbcc"),
helpText("Step 2: Select file to be analyzed"),
shinyFilesButton(id = "file",
label = "File select",
title = "Please select a file",
multiple = TRUE),
# Input: Submit button ----
actionButton(inputId = "submit", label = "Submit")
),
# Main panel for displaying output ----
mainPanel(
# output metadata table
helpText("Files Selected:"),
verbatimTextOutput("filepaths"),
tags$hr(),
# output selected names
helpText("FastQC status:"),
textOutput("filepaths1"),
tags$hr(),
# display tabs
tabPanel(tabPanel("Plot")),
uiOutput('mytabs')
)
)
)
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
shiny::runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
runApp('Dropbox/Rshiny_project/fastqc')
R.version
updateR()
R.version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt", version = "3.8")
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host = "bacteria.ensembl.org")
bacteria=useMart("bacteria_mart_14")
listMarts()
library(biomaRt)
listMarts()
listMarts(host="bacteria.ensembl.org")
listMarts(host="ENSEMBL_MART_ENSEMBL")
listMarts("ENSEMBL_MART_ENSEMBL")
listMarts(mart = "ENSEMBL_MART_ENSEMBL")
listMarts(mart = ENSEMBL_MART_ENSEMBL)
bacteria=useMart("ENSEMBL_MART_ENSEMBL")
bac=useDataset("str_22007_gene", mart=bacteria)
listDatasets()
listDatasets(mart = bacteria)
bac=useDataset(mart=bacteria)
listMarts()
listMarts(host="bacteria.ensembl.org", verobse=TRUE)
listMarts(host="bacteria.ensembl.org")
getGroups(db = "refseq", kingdom = "bacteria")
listMarts(host="plants.ensembl.org")
listMarts(host="bacteria.ensembl.org")
library(clusterProfiler)
install.packages('clusterProfiler')
xtheta <- seq(0,50,length=1000)
n1.a <- 10 ; sy1.a <- 117   # A data in observed y_{A}
a.a <- 120 ; b.a <- 10  # A prior parameters
n1.a <- 10 ; sy1.a <- 117   # A data in observed y_{A}
a.b <- 12  ; b.b <- 1   # B prior parameters
n1.b <- 13 ; sy1.b <- 113   # B data in observed y_{B}
dgamma(xtheta, a.b+sy1.b, b.b+n1.b)
dgamma(xtheta, 12*(a.b+sy1.b), b.b+n1.b)
dgamma(xtheta, 12*n, n)
n <- seq(1,50,length=50)
dgamma(xtheta, 12*n, n)
dgamma(xtheta, 12*n, n)
plot(n,dgamma(xtheta, 12*n, n) )
plot(n,dgamma(n, 12*n, n))
dgamma(xtheta, (12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, (12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, ((12*a.b)+sy1.b), b.b+n1.b)
plot(xtheta, dgamma(xtheta, ((12*a.b)+sy1.b), b.b+n1.b))
dgamma(n, ((12*a.b)+sy1.b), b.b+n1.b)
xtheta <- dgamma(n, ((12*a.b)+sy1.b), b.b+n1.b)
dgamma(xtheta, ((12*n)+sy1.b), n+n1.b)
dgamma(n, ((12*n)+sy1.b), n+n1.b)
?dgamma
dgamma(n, ((12*n)+sy1.b), n+n1.b)
n*2
((12*n)+sy1.b)/(n+n1.b)
plot(n, ((12*n)+sy1.b)/(n+n1.b))
setwd("~/")
setwd("~/Dropbox/STAT626/Project/STAT626")
#require(ggplot2)
# load data
df <- read.csv('dataset_diabetes/diabetic_data.csv')
df[df == '?'] = NA
df[df == 'None'] = NA
# remove columns with NAs
df <- df[,colSums(is.na(df)) == 0]
# relabel readmitted
df$readmitted = ifelse(df$readmitted=='NO',0,1)
write.csv(df, file='dataset_diabetes/diabetic_data.filtered.csv')
View(df)
summary(df$admission_source_id == 0)
summary(df$admission_source_id)
table(df$admission_source_id)
table(df$admission_type_id)
map <- read.csv('dataset_diabetes/IDs_mapping.csv')
View(map)
df <- df[-c('discharge_disposition_id', 'admission_source_id')]
df <- subset(df, select = -c('discharge_disposition_id', 'admission_source_id'))
df <- df[, !c('discharge_disposition_id', 'admission_source_id')]
df[ , !(names(df) %in% c('discharge_disposition_id', 'admission_source_id'))]
df <- df[ , !(names(df) %in% c('discharge_disposition_id', 'admission_source_id'))]
View(df)
