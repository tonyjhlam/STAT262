acf(theta.max)
theta.min
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[1,2], sd = sqrt(PHI[1,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[1,3], sd = sqrt(PHI[1,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta.max
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[1,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[1,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta.min
y
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta.min
acf(theta.min)
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
m1 <- min(mu1_i,mu2_i)
m2 <- max(mu1_i,mu2_i)
mu1_i <- m1
mu2_i <- m2
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
PHI
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
acf(theta.min)
acf(theta.max)
acf(theta_min)
acf(theta_max)
Y_tilde <- NULL
for (i in 1:N)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
Y_tilde <- NULL
x <- c(rbinom(n=1, size=1, prob=p))
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
x
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
x <- c(x, rbinom(n=1, size=1, prob=PHI[i+1,1]))
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
plot(Y_tilde)
plot(density(Y_tilde))
lines(glucose$X86)
lines(glucose$X86,col='red')
plot(density(Y_tilde))
par(new=T)
plot(glucose$X86,col='red')
plot(density(glucose$X86),col='red')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n')
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab='n')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2,xlab='Values')
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
combn(5,3)
t(combn(5,3))
setwd("C:/Vivek's Stuff/Classes/Bayesian Theory/Project/STAT262")
diabetes <- read.csv('dataset_diabetes.csv')
diabetes <- read.csv('\dataset_diabetes\diabetic_data.csv')
setwd("C:/Vivek's Stuff/Classes/Bayesian Theory/Project/STAT262/dataset_diabetes")
diabetes <- read.csv('diabetic_data.csv')
dim(diabetes)
summary(diabetes)
