y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta.min
acf(theta.min)
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
PHI[i+1,2] <- rnorm(1, mean=mu1_i, sd=sqrt(tau1_i))
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,3] <- rnorm(1, mean=mu2_i, sd=sqrt(tau2_i))
m1 <- min(mu1_i,mu2_i)
m2 <- max(mu1_i,mu2_i)
mu1_i <- m1
mu2_i <- m2
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
PHI
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
acf(theta.min)
acf(theta.max)
acf(theta_min)
acf(theta_max)
Y_tilde <- NULL
for (i in 1:N)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
}
theta <- cbind(PHI[,2],PHI[,3])
theta.min <- apply(theta,1,min)
theta.max <- apply(theta,1,max)
theta_min <- theta.min
theta_max <- theta.max
Y_tilde <- NULL
x <- c(rbinom(n=1, size=1, prob=p))
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
x
df <- read.table('http://www2.stat.duke.edu/~pdh10/FCBS/Exercises/glucose.dat',header=T)
set.seed(1)
### priors values
y <- df$X86
a <- 1
b <- 1
mu0 <- 120
tau0sq <- 200
sigma0sq <- 1000
nu0 <- 10
x <- c(rbinom(n=1, size=1, prob=p))
### initial values
p <- 0.5
n <- length(y)
#X <- rbinom(n, size = 1, prob = p)
theta1 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
theta2 <- rnorm(1, mean=mu0, sd=sqrt(tau0sq))
sigma1sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
sigma2sq <- (1/rgamma(1, shape=nu0/2, rate=nu0*sigma0sq/2))
### gibbs sampler parameters
N <- 10000 #itterations
PHI <- matrix(nrow=N+1, ncol=5) #build parameter storage matrix
PHI[1,] <- c( p, theta1, theta2, sigma1sq, sigma2sq)
for(i in 1:N){
# generate a new X from its full conditional, given a mixture model of Y_1 and Y_2
Y_1 <-   (PHI[i,1]) * dnorm( y, mean = PHI[i,2], sd = sqrt(PHI[i,4])) # norm(theta_1,sigma_1^2)
Y_2 <- (1-PHI[i,1]) * dnorm( y, mean = PHI[i,3], sd = sqrt(PHI[i,5])) # norm(theta_2,sigma_2^2)
bernoulli_p   <- Y_1/(Y_1+Y_2) # calculate new p from mixture model of Y_1 and Y2
X   <- rbinom( n, size=1, prob=bernoulli_p ) # new distribution of X
# using newly sampled X, generate new values
n1 = sum(X)
n2 = n - sum(X)
nu1_i <- nu0 + n1
nu2_i <- nu0 + n2
y1 = y[X == 1]
y2 = y[X == 0]
y.bar1 = mean(y1)
y.bar2 = mean(y2)
y.var1 = var(y1)
y.var2 = var(y2)
# generate a new p value from its full conditional
PHI[i+1,1] <- rbeta(1, shape1=a+n1, shape2=b+n2)
# generate a new theta value from its full conditional
mu1_i      <- ((mu0/tau0sq)+(n1*y.bar1/PHI[i,4]))/((1/tau0sq)+(n1/PHI[i,4])) #new mu_1 value
tau1_i     <- 1/((1/tau0sq)+(n1/PHI[i,4])) #new tau_1 value
mu2_i      <- ((mu0/tau0sq)+(n2*y.bar2/PHI[i,5]))/((1/tau0sq)+(n2/PHI[i,5])) #new mu_2 value
tau2_i     <- 1/((1/tau0sq)+(n2/PHI[i,5])) #new tau_2 value
PHI[i+1,2] <- rnorm(1, mean=min(mu1_i,mu2_i), sd=sqrt(tau1_i))
PHI[i+1,3] <- rnorm(1, mean=max(mu1_i,mu2_i), sd=sqrt(tau2_i))
# generate new sigma^2 value from its full conditional
sigma1_i <- (nu0*sigma0sq + (n1-1)*y.var1+n1*(y.bar1-PHI[i,2])^2)/nu1_i
PHI[i+1,4] <- 1/rgamma(1, shape=nu1_i/2, rate=nu1_i*sigma1_i/2)
sigma2_i <- (nu0*sigma0sq + (n2-1)*y.var2+n2*(y.bar2-PHI[i,3])^2)/nu2_i
PHI[i+1,5] <- 1/rgamma(1, shape=nu2_i/2, rate=nu2_i*sigma2_i/2)
x <- c(x, rbinom(n=1, size=1, prob=PHI[i+1,1]))
}
for (i in 1:10000)
{
if (x[i] == 0)
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,3], sd=sqrt(PHI[i,5])))
}
else
{
Y_tilde <- c(Y_tilde, rnorm(1, mean=PHI[i,2], sd=sqrt(PHI[i,4])))
}
}
plot(Y_tilde)
plot(density(Y_tilde))
lines(glucose$X86)
lines(glucose$X86,col='red')
plot(density(Y_tilde))
par(new=T)
plot(glucose$X86,col='red')
plot(density(glucose$X86),col='red')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main=NULL)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n')
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab='n')
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2,xlab='Values')
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NULL)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
plot(density(Y_tilde),main='Density plot of both distributions(thicker is actual)',lwd=2)
par(new=T)
plot(density(glucose$X86),lwd=5,main='',xaxt='n',yaxt='n',xlab=NA)
combn(5,3)
t(combn(5,3))
diabetes <- read.csv('diabetic_data.csv')
diabetes <- read.csv('diabetic_data.csv')
setwd("C:/Vivek's Stuff/Classes/Bayesian Theory/Project/STAT262/dataset_diabetes")
diabetes <- read.csv('diabetic_data.csv')
diabetes <- read.csv('diabetic_data.csv')
View(diabetes)
x_values <- seq(-15,15, length.out = 1000)
data.frame(x_values) %>%
ggplot(aes(x_values))+
stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
data.frame(x_values) %>%ggplot(aes(x_values))+stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
library(dplyr)
data.frame(x_values) %>% ggplot(aes(x_values))+stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
library(ggplot2)
data.frame(x_values) %>% ggplot(aes(x_values))+stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
library(ggplot2)
library(brms)
library(tidyverse)
library(tidybayes)
library(LaplacesDemon)
install.packages('brms')
install.packages("brms")
install.packages('LaplacesDemon')
diabetes <- read.csv('diabetic_data.filtered.csv')
x_values <- seq(-15,15, length.out = 1000)
data.frame(x_values) %>% ggplot(aes(x_values))+stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
library(dplyr)
library(ggplot2)
library(brms)
library(tidyverse)
library(tidybayes)
library(LaplacesDemon)
data.frame(x_values) %>% ggplot(aes(x_values))+stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
View(diabetes$encounter_id)
View(diabetes[,c(1:2)])
sort(diabetes$encounter_id)
View(diabetes)
install.packages('PolyaGamma')
library(PolyaGamma)
devtools::install_github("kasparmartens/PolyaGamma")
library(PolyaGamma)
columns(diabetes)
colnames(diabetes)
obj = gibbs_sampler(diabetes$readmitted,diabetes[,21:33], lambda=0.001, n_iter_total=200, burn_in=50)
diabetes[,21:33]
obj = gibbs_sampler(diabetes$readmitted,as.matrix(diabetes[,21:33]), lambda=0.001, n_iter_total=200, burn_in=50)
as.matrix(diabetes[,21:33])
diabetes[,21:33]
summary(diabetes[,21:33])
type(diabetes[,21:33])
class(diabetes[,21:33])
class(diabetes[,21])
as.matrix(as.numeric(diabetes[,21:33]))
obj = gibbs_sampler(diabetes$readmitted,as.matrix(diabetes$insulin), lambda=0.001, n_iter_total=200, burn_in=50)
obj = gibbs_sampler(diabetes$readmitted,as.numeric(diabetes$insulin), lambda=0.001, n_iter_total=200, burn_in=50)
as.nuemric(diabetes$insulin)
as.numeric(diabetes$insulin)
as.matrix(as.numeric(diabetes$insulin))
obj = gibbs_sampler(diabetes$readmitted,as.matrix(as.numeric(diabetes$insulin)), lambda=0.001, n_iter_total=200, burn_in=50)
install.packages('rjags')
library(rjags)
logistic_model <- "model{
# Likelihood
for(i in 1:n){
Y[i] ~ dbern(q[i])
logit(q[i]) <- beta[1] + beta[2]*X[i,1] + beta[3]*X[i,2] +
beta[4]*X[i,3] + beta[5]*X[i,4] + beta[6]*X[i,5]
}
#Priors
for(j in 1:6){
beta[j] ~ dnorm(0,0.1)
}
}"
n <- length(diabetes$readmitted)
dat <- list(Y=diabetes$readmitted,n=n,X=as.matrix(diabetes[,21:30]))
dat
model <- jags.model(textConnection(logistic_model),data = diabetes,n.chains=3, quiet=TRUE)
library(rjags)
model <- jags.model(textConnection(logistic_model),data = diabetes,n.chains=3, quiet=TRUE)
install.packages('rjags')
library(rjags)
x_values <- seq(-15,15, length.out = 1000)
data.frame(x_values) %>%
ggplot(aes(x_values))+
stat_function(fun=dst, args=list(nu=3,mu=0,sigma=2.5))
m1priors <- c(
prior(student_t(3, 0, 2.5), class = "Intercept"),
prior(student_t(3, 0, 2.5), class = "b")
)
colnames(diabetes)
m1priors <- c(
prior(student_t(3, 0, 2.5), class = "Intercept"),
prior(student_t(3, 0, 2.5), class = "b")
)
m1 <- brm(
readmitted~insulin,
data = diabetes[,c(42,34)],
prior = m1priors,
family = "bernoulli",
seed = 123 # Adding a seed makes results reproducible.
)
m1 <- brm(
readmitted~as.matrix(as.numeric(insulin)),
data = diabetes[,c(42,34)],
prior = m1priors,
family = "bernoulli",
seed = 123 # Adding a seed makes results reproducible.
)
m1priors
new_diab <- as.data.frame(diabetes[,c(42,34)])
new_diab$insulin
new_diab$insulin <- as.numeric(new_diab$insulin)
new_diab$readmitted
m1 <- brm(
readmitted~insulin,
data = new_diab,
prior = m1priors,
family = "bernoulli",
seed = 123 # Adding a seed makes results reproducible.
)
brm(readmitted~insulin,new_diab)
summary(new_diab)
isFALSE <-
function (x)
{
identical(FALSE, x)
}
m1 <- brm(
readmitted~insulin,
data = new_diab,
prior = m1priors,
family = "bernoulli",
seed = 123 # Adding a seed makes results reproducible.
)
m1 <- brm(
readmitted~insulin,
data = new_diab,
prior = m1priors,
family = "bernoulli",
seed = 123 # Adding a seed makes results reproducible.
)
m1
summary(m1)
m1$prior
plot(m1)
plot(marginal_effects(m1), points = TRUE, rug = TRUE)
cor(new_diab$readmitted,as.numeric(new_diab$insulin))
anova(new_diab$readmitted,as.numeric(new_diab$insulin))
confusionMatrix(new_diab$readmitted,as.numeric(new_diab$insulin))
library(caret)
confusionMatrix(new_diab$readmitted,as.numeric(new_diab$insulin))
m1$marglik
m1$model
m1$R2
m1$stan_funs
summary(m1)
print(exp(parameters[c(".value",".lower",".upper")]))
summary(diabetes$time_in_hospital)
